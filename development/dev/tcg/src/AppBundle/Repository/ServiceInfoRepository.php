<?php

namespace AppBundle\Repository;

use AppBundle\Document\ServiceInfo;
use AppBundle\Document\ServiceStatus;
use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * ServiceInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceInfoRepository extends DocumentRepository
{
    public function findLastService($clientId){

        $last = $this->createQueryBuilder()
            ->field("clientId")->equals($clientId)
            ->limit(1)
            ->sort(array("serviceDate"=>'DESC'))
            ->getQuery()
            ->getSingleResult();

        return $last;
    }

    public function findPendingService(){

        $query = $this->createQueryBuilder();
        $serviceInfoList= $query->field("status")->addOr($query->expr()->field("status")->equals(ServiceStatus::Pending))
            ->getQuery()
            ->execute();

        return $serviceInfoList;
    }



    public function findConfirmed($filters){

        $query = $this->createQueryBuilder()->field("isConfirmed")->equals(true);
        if($filters!=null){
            $query->field("status");
            if($filters['pending']=="true"){
                $query->addOr($query->expr()->field("status")->equals(ServiceStatus::Pending));
            }
            if($filters['processing']=="true"){
                $query->addOr($query->expr()->field("status")->equals(ServiceStatus::Processing));
            }
            if($filters['completed']=="true"){
                $query->addOr($query->expr()->field("status")->equals(ServiceStatus::Completed));
            }
            if($filters['reviewed']=="true"){
                $query->addOr($query->expr()->field("status")->equals(ServiceStatus::Reviewed));
            }
            $query->addOr($query->expr()->field("status")->equals(ServiceStatus::Cancelled));
            if($filters['cancelled']=="true"){
                $query->addOr($query->expr()->field("status")->equals(ServiceStatus::Cancelled));
            }
        }
        $serviceInfo = $query->sort(array("status"=>'ASC'))
            ->sort(array("serviceDate"=>'ASC'))
            ->getQuery()
            ->execute();

        return $serviceInfo;
    }

    public function findUnconfirmed(){

        $serviceInfo = $this->createQueryBuilder()
            ->field("status")->equals(ServiceStatus::Pending)
            ->field("isConfirmed")->equals(false)
            ->sort(array("serviceDate"=>'ASC'))
            ->getQuery()
            ->execute();

        return $serviceInfo;
    }

    public function findPending($clientId){
        $activeClients = $this->findBy(array("status"=> ServiceStatus::Pending,"clientId"=>$clientId));

        return $activeClients;
    }

    public function findCompleteService($clientId,$limit = 5){
        $query = $this->createQueryBuilder();

        $last = $this->createQueryBuilder()
            ->field("status")
            ->addOr($query->expr()->field("status")->equals(ServiceStatus::Completed))
            ->addOr($query->expr()->field("status")->equals(ServiceStatus::Reviewed))
            ->field("clientId")->equals($clientId)
            ->limit($limit)
            ->sort(array("serviceDate"=>'DESC'))
            ->getQuery()
            ->execute();
        return $last;
    }

    public function findLastCompleteService($clientId){

        $query = $this->createQueryBuilder();

        $last = $this->createQueryBuilder()
            ->field("status")
            ->addOr($query->expr()->field("status")->equals(ServiceStatus::Completed))
            ->addOr($query->expr()->field("status")->equals(ServiceStatus::Reviewed))
            ->field("clientId")->equals($clientId)
            ->limit(1)
            ->sort(array("serviceDate"=>'DESC'))
            ->getQuery()
            ->getSingleResult();
        return $last;
    }

    public function findAllService(){
        $all = $this->findAll();
        return $all;
    }

    public function save($serviceInfo){
        $serviceInfo->setModifyTime(new \DateTime('NOW'));
        $this->dm->persist($serviceInfo);
        $this->dm->flush();
    }

}